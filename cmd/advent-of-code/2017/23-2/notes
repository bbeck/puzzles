  L01: set b 67             b = 67                     b = 67                  b = 67
  L02: set c b              c = b                      c = b                   c = b
  L03: jnz a 2              if a != 0 goto L05         if a != 0:              if a != 0:
  L04: jnz 1 5              goto L09                     b = b*100 + 100000      b = b*100 + 100000
* L05: mul b 100            b = b*100                    c = b+17000             c = b+17000
  L06: sub b -100000        b = b+100000
  L07: set c b              c = b
  L08: sub c -17000         c = c+17000
* L09: set f 1              f = 1                      f = 1                   f = 1
  L10: set d 2              d = 2                      d = 2                   d = 2
* L11: set e 2              e = 2                      e = 2                   do { e = 2
* L12: set g d              g = d                      g = d*e - b               do {
  L13: mul g e              g = g*e
  L14: sub g b              g = g-b
  L15: jnz g 2              if g != 0 goto L17         if g == 0:                  if d*e - b == 0:
  L16: set f 0              f = 0                        f = 0                       f = 0
* L17: sub e -1             e = e+1                    e = e+1                     e = e+1
  L18: set g e              g = e                      g = e-b
  L19: sub g b              g = g-b
  L20: jnz g -8             if g != 0 goto L12         if g != 0: goto L12       } while e-b != 0
  L21: sub d -1             d = d+1                    d = d+1                   d = d+1
  L22: set g d              g = d                      g = d-b
  L23: sub g b              g = g-b
  L24: jnz g -13            if g != 0 goto L11         if g != 0: goto L11     } while d-b != 0
  L25: jnz f 2              if f != 0 goto L27         if f != 0: goto L27     if f == 0:
  L26: sub h -1             h = h+1                    h = h+1                   h = h+1
* L27: set g b              g = b                      g = b-c
  L28: sub g c              g = g-c
  L29: jnz g 2              if g != 0 goto L31         if g != 0:              if b != c:
  L30: jnz 1 3              goto END                     b = b+17                b = b+17
* L31: sub b -17            b = b+17                     goto L09                goto L09
  L32: jnz 1 -23            goto L09
* END:


b = c = 67
if a != 0:
  b = b*100 + 100000
  c = b+17000

for b=b; b != c; b += 17 {
  f = false

  // These loops determine if b is composite by
  // looking for a d and e so that d*e == b.
  for d=2; d != b; d++ {
    for e=2; e != b; e++ {
      if d*e == b {
        f = true
      }
    }
  }

  if f {
    h++
  }
}

// We'll rewrite the above to something like...

b = c = 67
if a != 0:
  b = b*100 + 100000
  c = b+17000

for b=b; b <= c; b += 17 {
  f = false

  for d=2; d != b/2 + 1; d++ {
    if b % d == 0 {
      h++
      break
    }
  }
}

#
# Initialization of b and c
#
  L01: set b 67
  L02: set c b
  L03: jnz a 2
  L04: jnz 1 5
* L05: mul b 100
  L06: sub b -100000
  L07: set c b
  L08: sub c -17000

#
# Determine if b is composite (for d=2; d < e/2 + 1; d++)
#
  L09: set e b
  L10: div e 2
  L11: sub e -1
* L12: set d 2
* L13: set g b
  L14: mod g d
  L15: jnz g 3
  L16: sub h -1
  L17: jnz 1 13
* L18: sub d -1
  L19: set g d
  L20: sub g e
  L21: jnz g -8

#
# No op padding to keep relative offsets the same
#
  L22: nop
  ...
  L26: nop

#
# Loop management (for b=b; b <= c; b+=17)
#
* L27: set g b
  L28: sub g c
  L29: jnz g 2
  L30: jnz 1 3
* L31: sub b -17
  L32: jnz 1 -23
* END: